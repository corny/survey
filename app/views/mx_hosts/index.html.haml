%h1 MX-Hosts

%h3 STARTTLS support
%dl.dl-horizontal.with-charts
  %dt supported
  %dd= MxHost.where(starttls: true).count
  %dt unsupported
  %dd= MxHost.where(starttls: false).count
  %dt unreachable
  %dd= MxHost.where(starttls: nil).count

%h2 Certificates

%h3 Trust and Expiration
%dl.with-charts
  - [true, false].each do |b1|
    - [true, false].each do |b2|
      %dt Trusted=#{b1.inspect} Expired=#{b2.inspect}
      %dd= MxHost.where(cert_trusted: b1, cert_expired: b2).count

%h2 MX-Records with certificates
%dl.dl-horizontal.with-charts
  %dt valid an matching
  %dd= MxRecord.where(cert_matches: true).cert_trusted(true).count

  %dt valid an not matching
  %dd= MxRecord.where(cert_matches: false).cert_trusted(true).count

  %dt invalid and matching
  %dd= MxRecord.where(cert_matches: true).cert_trusted(false).count

  %dt invalid and not matching
  %dd= MxRecord.where(cert_matches: false).cert_trusted(false).count

%h2 TLS parameters

.row
  .col-md-6
    %h3 TLS Versions
    %dl.dl-horizontal.with-charts.with-charts
      - Stats.tls_versions.each do |record|
        %dt= record.tls_version_names.join(",")
        %dd= record.count
  .col-md-6
    %h3 TLS Cipher Suites
    %dl.with-charts
      - Stats.tls_cipher_suites.each do |record|
        %dt= record.tls_cipher_suite_names.join(",")
        %dd= record.count


%h2 ECDHE parameters

.row
  - %w( curve_type curve_id ).each do |key|
    .col-md-6
      %h3= key
      %dl.dl-horizontal.with-charts.with-charts
        - Stats.field_count(:mx_hosts, "ecdhe_#{key}").each do |record|
          %dt= key=="curve_id" ? Names.curve(record[0]) : record[0]
          %dd= record[1]


%h2 Errors
%table.table.table-condensed.table-striped.table-hover
  - Stats.field_count(:mx_hosts, :error).each do |record|
    %tr
      %td= record[1]
      %td= record[0]


%h2 Hostnames per Address
%ul
  - Stats.hostnames_per_address.each do |mx_host|
    %li
      = mx_host.address
      .badge.bage-default= mx_host.count
