%h1 Trusted Root Certificates

- roots = Roots.new

%p
  = roots.count
  root certificates found,
  = roots.used.count
  are in use.

%h2 By Signature Algorithm

%table.table.table-condensed.table-striped.table-hover
  %thead
    %tr
      %th Signature Algorithm
      %th Key Size
      %th Root Certificates
  %tbody
    - roots.by_signature_and_keysize.each do |(signature_algorithm,key_size),certs|
      %tr
        %td= signature_algorithm
        %td= key_size
        %td= certs.count

%h2 By Certificate

%table.table.table-condensed.table-striped.table-hover
  %tbody
    %tr
      %th MX hosts
      %th Subject
      %th Sub-CAs
      %th Signature Algorithm <br> Key Size
      %th Not before
      %th Not after
  %tbody
    - # FIXME: this is not DRY
    - roots.each do |cert|
      %tr{ class: cert.missing ? "danger" : nil }
        %td.text-right= cert.count
        %td
          = cert.x509.subject
          %br
          %code{title: 'SHA1 fingerprint'}= cert.x509.sha1
          - if cert.missing
            NOT in Mozilla store
        %td.text-right= cert.intermediates.count
        %td
          = cert.x509.signature_algorithm
          %br
          = cert.x509.key_size
        %td= cert.x509.not_before.to_date
        %td= cert.x509.not_after.to_date

%h2 By organization

%table.table.table-condensed.table-striped.table-hover
  %thead
    %tr
      %th Organization
      %th Root-Certificates used/total
      %th Sub-CAs
      %th Hosts
  %tbody
    - roots.by_organization.each do |org,certs|
      %tr
        %td= org
        %td
          = certs.select{|c| c.count > 0 }.count
          \/
          = certs.count
        %td= certs.map(&:intermediates).map(&:count).sum
        %td= certs.map(&:count).sum
  %tfoot
    %td
    %td
      = roots.used.count
      \/
      = roots.count
    %td
