#!/usr/bin/env ruby
require_relative '../config/environment'

def write_data(path,proc)
  if ARGV.any? && !ARGV.include?(path)
    STDERR.puts "skipping #{path}"
    return
  end

  puts "building #{path}"

  data = proc.call
  if Array === data
    data = data.map{|o| o.deep_stringify_keys }
  elsif data.respond_to?(:to_h)
    data = data.to_h.deep_stringify_keys
  end

  data = data.to_yaml unless String === data

  file = Rails.root.join("data").join(path,"data.yml")
  file.dirname.mkpath
  file.open("w") do |f|
    f.puts data
  end
end

write_data "tex/vars",       ->{ Vars }
write_data "tex/mx_charts",  ->{ Stats.mx_charts(50) }
write_data "tex/mx_errors",  ->{ MxHost.errors.to_h }
write_data "tex/mx_records", ->{ Stats.mx_address_stats }
write_data "images/mxcount", ->{ Stats.mx_counts.to_yaml }
write_data "tex/mx_dnssec",  ->{ %w( domains mx_records).map{|key| [key, Stats.dnsstatus(key)] }.to_h.to_yaml }

write_data "tex/certs_signature_algorithms", ->{ Certificate.by_signatures_keys.map{|row| {oid: row.signature_algorithm, name: row.signature_algorithm_name, count: row.count } } }
write_data "tex/certs_rsakeys",              ->{ Certificate.where(key_algorithm: 'RSA').select_with_group(:key_size) }
write_data "tex/certs_days_valid",           ->{ Certificate.select_with_group(:days_valid) }
write_data "tex/certs_ca_selfsigned",        ->{ Certificate.select_with_group(:is_ca, :is_self_signed) }
write_data "tex/mx_trusted_expired",         ->{ MxHost.where("cert_trusted IS NOT null").select_with_group(:cert_trusted, :cert_expired) }
write_data "tex/mx_ecdhe_curves",            ->{ MxHost.with_tls.select_with_group(:ecdhe_curve_id).map{|row| row.merge(name: Names.curve(row['ecdhe_curve_id']))  } }

%w( tls_version tls_cipher_suite ).each do |key|
  write_data "tex/mx_hosts_#{key}s", ->{ Stats.send("#{key}s").map{|row| {names: row.send("#{key}_names"), count: row.count } } }
end

# Root Certificates
%w( owners signatures_keys ).each do |key|
  write_data "tex/root_#{key}", ->{ RootCertificates.instance.send("by_#{key}").map(&:to_h) }
end

write_data "tex/issuers", ->{ Stats.issuers(20).map(&:to_h) }
